'use strict';
var https = require('https');

// --------------- Main handler -----------------------
 
// Route the incoming request based on intent.
// The JSON body of the request is provided in the event slot.
exports.handler = (event, context, callback) => {
    try {
        if (event.bot.name !== "CryptoMarketBot") {
          callback("Invalid Bot Name");
          process.exit(1);
        }
        dispatch(
            event, (response) => {callback(null, response);}
        );
    } catch (err) {
        callback(err);
    }
};

// --------------- Events -----------------------
 
function dispatch(intentRequest, callback) {
    console.log(`request received for userId=${intentRequest.userId}, intentName=${intentRequest.currentIntent.name}`);
    const sessionAttributes = intentRequest.sessionAttributes;
    const slots = intentRequest.currentIntent.slots;
    const fromCurr = slots.FromCurr;
    const toCurr = slots.ToCurr;
    let num = 0;
    let url = `https://min-api.cryptocompare.com/data/price?fsym=${fromCurr}&tsyms=${toCurr}`;
    
    if (intentRequest.currentIntent.name === "AmountConvert") {
        const fromAm = slots.FromAmount;
        
        https.get(url, (res) => {
          const { statusCode } = res;
          const contentType = res.headers['content-type'];
        
          let error;
          if (statusCode !== 200) {
            error = new Error('Request Failed.\n' +
                              `Status Code: ${statusCode}`);
          } else if (!/^application\/json/.test(contentType)) {
            error = new Error('Invalid content-type.\n' +
                              `Expected application/json but received ${contentType}`);
          }
          if (error) {
            console.error(error.message);
            // consume response data to free up memory
            res.resume();
            return;
          }
        
          res.setEncoding('utf8');
          let rawData = '';
          
          res.on('data', (chunk) => { rawData += chunk; });
          
          res.on('end', () => {
            try {
              const parsedData = JSON.parse(rawData);
              console.log(parsedData[toCurr]);
              num = (parsedData[toCurr])*(parseInt(fromAm));
              console.log(`${fromAm} ${fromCurr} equates to ${num.toFixed(5)} ${toCurr}`);
              
              callback(close(sessionAttributes, 'Fulfilled',
              {'contentType': 'PlainText', 'content': `${fromAm} ${fromCurr} equates to ${num.toFixed(5)} ${toCurr}`}));
            } catch (e) {
              console.error(e.message);
            }
          });
        }).on('error', (e) => {
          console.error(`Got error: ${e.message}`);
        });
    } 
    
    else if (intentRequest.currentIntent.name === "SearchCryptoPrice") {
        https.get(url, (res) => {
          const { statusCode } = res;
          const contentType = res.headers['content-type'];
        
          let error;
          if (statusCode !== 200) {
            error = new Error('Request Failed.\n' +
                              `Status Code: ${statusCode}`);
          } else if (!/^application\/json/.test(contentType)) {
            error = new Error('Invalid content-type.\n' +
                              `Expected application/json but received ${contentType}`);
          }
          if (error) {
            console.error(error.message);
            // consume response data to free up memory
            res.resume();
            return;
          }
        
          res.setEncoding('utf8');
          let rawData = '';
          
          res.on('data', (chunk) => { rawData += chunk; });
          
          res.on('end', () => {
            try {
              const parsedData = JSON.parse(rawData);
              num = parsedData[toCurr];
              console.log(`One ${fromCurr} equates to ${num.toFixed(7)} ${toCurr}`);
              
              callback(close(sessionAttributes, 'Fulfilled',
              {'contentType': 'PlainText', 'content': `One ${fromCurr} equates to ${num.toFixed(7)} ${toCurr}`}));
            } catch (e) {
              console.error(e.message);
            }
          });
        }).on('error', (e) => {
          console.error(`Got error: ${e.message}`);
        });
    }
}
     
// Close dialog with the customer, reporting fulfillmentState of Failed or Fulfilled ("1000 USD equals .1064 BTC")
function close(sessionAttributes, fulfillmentState, message) {
    return {
        sessionAttributes,
        dialogAction: {
            type: 'Close',
            fulfillmentState,
            message,
        },
    };
}
 

 
